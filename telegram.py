"""
This is a echo bot.
It echoes any incoming text messages.
"""

import logging
import time
import uuid
import datetime

from aiogram import Bot, Dispatcher, executor, types
from main import AdsMarkup

API_TOKEN = ''

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("""ü§ñ –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –≤–∏–¥–µ–æ, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É.

üìÄ –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Ç–∏—Ç—å –≤–∏–¥–µ–æ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∏–µ–Ω—Ç–∞. –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º–µ—Ç–∫–∏ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞).

‚è± –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–∫–æ–¥–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É –º–µ—Å—Ç—É —Ä–æ–ª–∏–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω–∏—Ö.

‚≠ï –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç—Ä–∏–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '/link <—Å—Å—ã–ª–∫–∞>'

–ß–∏—Å–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: 0""")


@dp.message_handler(commands=['link'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    time.sleep(30)
    await message.reply(f'Stream: udp://194.135.22.86:2222?pkt_size=1316')





@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    await message.answer(message.text)

@dp.message_handler(content_types=["video"])
async def video_answer(message: types.Message):
    file_id = message['video']['file_id']
    file = await bot.get_file(file_id)
    file_path = file.file_path
    
    disk_path = f"/home/john/Downloads/{uuid.uuid4()}.mp4"

    await bot.download_file(file_path, disk_path)
    f = 'ffmpeg'

    
    a = AdsMarkup(disk_path, f)
    a.get_markup_vector()
    v = a.get_top_result()

    answer_message = ''
    
    time_by_score_list = []
    for res in v:
        t = (res['time'])
        if t not in time_by_score_list:
            time_by_score_list.append(t)

    
    for t in time_by_score_list:
        line_message = str(datetime.timedelta(seconds=t))

        answer_message += f'‚è± {line_message}\n'

    await message.reply(answer_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)